plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    //doc con dokka
    id 'jacoco'
    //serialization
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.23'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.example.practicaenequipocristianvictoraitornico'
    mainClass = 'org.example.practicaenequipocristianvictoraitornico.MainApp'
}
kotlin {
    jvmToolchain(21)
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}


dependencies {
    //libreria de drivers de base de datos H2
    implementation("com.h2database:h2:2.3.232")
    //jdbi libraries
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jdbi:jdbi3-core:3.48.0")
    implementation("org.jdbi:jdbi3-sqlobject:3.48.0")
    implementation("org.jdbi:jdbi3-kotlin:3.48.0")
    implementation("org.jdbi:jdbi3-kotlin-sqlobject:3.48.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.23")
    // librer√≠as para el logger
    implementation("org.lighthousegames:logging:1.3.0")
    implementation('ch.qos.logback:logback-classic:1.5.13')
    //implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.84.3")
    implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.90.3")
    //Json serializable
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:1.6.2")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2")

    // mockito
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("org.mockito.kotlin:mockito-kotlin:5.3.1")
    // test normales
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    //caffeine cache
    implementation("com.github.ben-manes.caffeine:caffeine:3.2.0")
    //Result exeptions
    implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")
    //BCrypt
    implementation("org.mindrot:jbcrypt:0.4")
    // Open Brwoser
    implementation("com.vaadin:open:8.5.0.4")
    //koin
    constraints {
        implementation("io.insert-koin:koin-core:3.5.6")
    }
    implementation("io.insert-koin:koin-core")
    testImplementation "org.jetbrains.kotlin:kotlin-test:2.1.0"
    // Jacoco
    implementation("org.jacoco:org.jacoco.core:0.8.12")
    testImplementation "org.jetbrains.kotlin:kotlin-test:1.9.23"
}

test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
    /*jvmArgs(
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-reads", "org.junit.jupiter.api=kotlin.stdlib"
    )*/
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}
jar {
    manifest {
        attributes 'Main-Class': 'practicaenequipocristianvictoraitornico.main'
    }
    from {
        configurations["compileClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
jacocoTestReport{
    dependsOn test
    reports {
        html.required=true
        csv.required=true
        xml.required=true
    }
    afterEvaluate {
        classDirectories.setFrom (files(classDirectories.files.collect{
                fileTree(dir: it, exclude: [
                    "**/models/**",
                    "**/exceptions/**",
                    "**/*Main*.*"
                ])
            }))
        }
    }

jacocoTestCoverageVerification{
    violationRules {
        rule {
            limit {
                minimum= 0.6
            }
        }
    }
}
task testCoverage(group: 'verification', description: 'Runs the unit tests with coverage'){
    dependsOn test,
        jacocoTestReport,
        jacocoTestCoverageVerification
}